(*  User declarations section for helper functions *)
open Ast
%%
(* ML Yacc Declarations *)
%name Untyped (* tokens signature will be Untyped_TOKENS *)
(*
  The structure Token is defined by LrParser structure provided
  by ml-yacc-lib
*)
%header (functor UntypedLrValsFun (structure Token : TOKEN) : Untyped_LRVALS)
%eop EOF
%noshift EOF
%pos int
(*
  Lex functor is constructed to expect TOKENS signature
  constructed from following declarations
 *)
%term   LAM
      | DOT
      | LPAREN
      | RPAREN
      | VAR of string
      | COLON
      | COMMA
      | NUMB of string
      | MAP
      | MAPI
      | FOLDL
      | FOLDLI
      | NTH
      | LOOP
      | ADD
      | MUL
      | DIV
      | LES
      | EQ
      | GRE
      | CINT
      | CREAL
      | CLIST
      | WILD
      | IF
      | ELSE
      | THEN
      | FST
      | SND
   | EOF
%nonterm prog of top_level
               | expr of exp
               | non_lam_term of exp
               | cctype of ctype
               | atom of exp
(*
  Precedence and associativity are implicit
*)
%verbose
%pure

%%
(* BNF Rules *)
prog : expr (expr)

expr :  LAM VAR DOT expr (Abs(VAR, Unknown, expr))
               | LAM LPAREN VAR COLON cctype RPAREN DOT expr (Abs(VAR, cctype, expr))
               | non_lam_term (non_lam_term)
non_lam_term : atom (atom)
      | MAP atom atom (Map(atom1, atom2))
      | MAPI atom atom (Mapi(atom1, atom2))
      | FOLDL atom atom atom (Foldl(atom1, atom2, atom3))
      | FOLDLI atom atom atom (Foldli(atom1, atom2, atom3))
      | NTH atom (Nth(atom))
      | IF expr THEN expr ELSE expr (Ifte (expr1, expr2, expr3))
      | LOOP atom atom atom (Loop(atom1, atom2, atom3))
      | non_lam_term atom (App(non_lam_term,atom))
cctype :
        CINT (Cint)
      | CREAL (Creal)
      | cctype CLIST (Clist(cctype))
      | VAR (CDistr(VAR))
      | WILD (Unknown)
atom :
        VAR (Var(VAR))
      | LPAREN expr RPAREN (expr)
      | LPAREN RPAREN (Unit)
      | expr COMMA expr (Pair(expr1, expr2))
      | expr ADD expr (Op(Add, expr1, expr2))
      | expr MUL expr (Op(Mul, expr1, expr2))
      | expr DIV expr (Op(Div, expr1, expr2))
      | expr LES expr (Op(Less, expr1, expr2))
      | expr EQ expr (Op(Eq, expr1, expr2))
      | expr GRE expr (Op(Greater, expr1, expr2))
      | FST expr (Fst(expr))
      | SND expr (Snd(expr))
      | NUMB (constFromString(NUMB))
